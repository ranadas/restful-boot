buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$boot_version")
    }
}

repositories {
    mavenCentral()
}
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'groovy'

group = 'com.rdas'

sourceCompatibility = 1.8
targetCompatibility = 1.8

war {
    baseName = 'rest-web-boot'
    version = '1-SNAPSHOT'
}
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
        compile "org.eclipse.jetty:jetty-webapp:9.+"
        compile "org.eclipse.jetty:jetty-jsp:9.+"
    }

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "org.projectlombok:lombok:$lombok_ver"
    compile "org.hibernate:hibernate-validator"
    compile "com.google.guava:guava:$guava_ver"

    //compile "org.apache.tomcat.embed:tomcat-embed-jasper:9.0.0.M8"
    compile "org.hsqldb:hsqldb"
    compile "org.codehaus.groovy:groovy-all:$groovy_ver"

    testCompile "org.spockframework:spock-core:$spock_ver"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.easytesting:fest-assert-core:2.0M10"

//    compile "org.eclipse.jetty:apache-jstl:9.4.0.M0"

    compile("io.springfox:springfox-swagger-ui:$swagger_ver") {
        exclude module: 'org.slf4j:slf4j-api'
        exclude module: 'com.google.guava:guava'
    }
    compile("io.springfox:springfox-swagger2:$swagger_ver") {
        exclude module: 'org.slf4j:slf4j-api'
        exclude module: 'com.google.guava:guava'
    }
    compile "org.springframework.boot:spring-boot-devtools"

    compile "org.apache.commons:commons-lang$commons_lang_ver"

    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security:spring-security-test:4.1.1.RELEASE"
}


test {

    loadConfigurations()
    println 'configurations from environment: ' + config.toString()

    systemProperty "foo", "barValurFromGradle2"
    systemProperty "host", config.host
    systemProperty "port", config.port
    systemProperty "user", config.user
    systemProperty "password", config.password

    // following to display logs in console
    testLogging.showStandardStreams = true

    testLogging {
        events 'started', 'passed'
    }
}

loadConfigurations()

def loadConfigurations() {
    def environment = hasProperty('env') ? env : 'dev'

    project.ext.envrionment = environment
    println "Environment is set to $environment"

    def configFile = file('environment.groovy')
    def config = new ConfigSlurper("$environment").parse(configFile.toURL())
    project.ext.config = config
}